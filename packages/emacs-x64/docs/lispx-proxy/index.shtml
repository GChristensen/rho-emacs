<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>lispx-proxy</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="cache-control" content="no-cache">
<link href="style.css" rel="stylesheet" type="text/css" />
</head>

<body>
<!--#include virtual="header.html"-->
<h2 align="center">lispx-proxy</h2>
<p align="center"><img src="images/logo.png" alt="Logo"></p>
<div align="justify" id="column1">

<h3>About</h3>

<p><b>lispx-proxy</b> (Lisp Execution Proxy) is a <b>Windows</b> utility to make your Lisp software easily invokable from the command-line and <b>Windows Explorer</b> (*nix port with limited functionality is also available). 
It allows to create relatively complex cross platform executable source code distributions which require zero configuration to run (see a <a href="https://youtu.be/TeAGkIjRn7s">video</a>). <b>lispx-proxy</b> is embedded
into <a href="https://rho-emacs.sourceforge.io">Rho Emacs</a> distribution.</p>

<h3>Motivation</h3>

<p>Because of the restricted <b>Windows</b> default command processor abilities it's hard to create such scripting tools as <a href="http://www.cliki.net/cl-launch">cl-launch</a> based on Windows command processor language. The most obvious solution of this problem is to create a tool which relies mostly on metadata and predefined filesystem structure rather than scripting.</p>
<p><b>lispx-proxy</b> incorporates this approach and also is aimed to be more than a script launching tool. It mimics cross platform Java/JAR packaged application distribution paradigm for Lisp and integrates itself into the <b>Windows</b> GUI shell, so it's possible to launch <b>lispx-proxy</b> executable source distributions as regular Windows applications. But <b>lispx-proxy</b> distributions should not be considered as a replacement for native compiled Lisp programs. <b>lispx-proxy</b> is intended to be used merely as a convenience tool, only when it's appropriate.</b>

<h3>Examples</h3>

<p>Examples of <b>lispx-proxy</b> scripts and executable source distributions could be downloaded separately at the project's sourceforge download <a href="https://sourceforge.net/projects/lispx-proxy/files">group</a> (they may be a little bit outdated now).</p>

<h3>lispx-proxy Command Line Options</h3>

<pre
>Usage: lispx [script/application file] [options] [script args<sup>1</sup>]

The following options are available:
  -l [ --language ] arg       specify the application language:
                                lisp - Common Lisp [default]
                                clojure - Clojure
                                scheme - Scheme
  -i [ --implementation ] arg specify the application language implementation<sup>2</sup>
  -c [ --command ] arg        path to an interpreter executable
  -p [ --classpath ] arg      classpath of a JVM based interpreter
  -b [ --init ] arg           load the init file before executing the script
  -z [ --package ] arg        create a packaged distribution<sup>3</sup>
  -C [ --change-dir ] arg     change the working directory
  --clear-cache               clear lispx-proxy application cache<sup>4</sup>
  --silent                    do not print anything to the standard output<sup>5</sup>
  --dump                      create a fast-loadable image of the application<sup>6</sup>
  --executable                produce an executable binary
  --repl                      launch the REPL
  --help                      print this help message
  --version                   display lispx-proxy version
</pre>

<br/>

<span class="software"><sup>1</sup> See <b>Table 1</b> for the information about script argument access.<br/></span>
<span class="software"><sup>2</sup> See <b>Table 3</b> for the list of supported implementations.<br/></span>
<span class="software"><sup>3</sup> See the <b>Creating packaged distributions</b> section for details.<br/></span>
<span class="software"><sup>4</sup> See the <b>Usage</b> section for details.<br/></span>
<span class="software"><sup>5</sup> On <b>Windows</b> the application tray icon will also not be shown.<br/></span>
<span class="software"><sup>6</sup> No access to the command-line arguments, the resulting application may be not relocable.</span>

<h3>Usage</h3>

<p>To use <b>lispx-proxy</b> type the `lispx' command in your command prompt followed by a script or a `.lispx' file name (it's not necessary to specify a file extension for the supported file types). All options unrecognized by <b>lispx-proxy</b> will be passed to the launched script and will be available as a list (which should be considered constant) through the argument access variables specified in <b>Table 1</b>. If script or package file name is relative and the file is absent in the current directory, <b>lispx-proxy</b> will search for it in the `~/.lispx/scripts' folder (where `~' is a path to the user's home dir.), so you can place often used utilities there. </b></p>
<p>When launching a packaged distribution, <b>lispx-proxy</b> extracts its content into a folder inside the <b>lispx-proxy</b> application cache located at `~/.lispx/cache' and executes the application from there. After the package was installed into the application cache, its compressed file will be used as a `shortcut' for the application launch until its modification time or the application metadata are changed.</p>
<p>Note, that <b>lispx-proxy</b> never clears its cache, and you have to do this manually with the `--clear-cache' command line switch.</p>

<h3>Compatibility</h3>


<h4>Table 1, Supported Languages</h4>

<table border="0" cellpadding="3" cellspacing="0" class="simple software" align="center">
 <tr>
   <th>Language Name</th>
   <th>Variable to access<br/>script arguments</th>
   <th>Variable get the<br/>application directory</th>
   <th>Default Implementation</th>
 </tr>
 <tr>
   <td>Common Lisp</td>
   <td>lispx:*argv*</td>
   <td>lispx:*app-root*</td>
   <td>Clozure CL</td>
 </tr>
 <tr>
   <td>Clojure</td>
   <td>lispx/*argv*</td>
   <td>lispx/*app-root*</td>
   <td>Clojure for JVM</td>
 </tr>
 <tr>
   <td>Scheme</td>
   <td>lispx/*argv*</td>
   <td>lispx/*app-root*</td>
   <td>Racket</td>
 </tr>
</table>


<h4>Table 2, Supported File Types</h4>


<table border="0" cellpadding="3" cellspacing="0" class="simple software" align="center">
 <tr>
   <th>File&nbsp;extensions</th>
   <th>Language</th>
   <th>Comment</th>
 </tr>
 <tr>
   <td>.lisp, .lsp, .cl</td>
   <td>Common Lisp</td>
   <td>-</td>
 </tr>
 <tr>
   <td>.clj</td>
   <td>Clojure</td>
   <td>-</td>

 </tr>
 <tr>
   <td>.scm, .rkt</td>
   <td>Scheme</td>
   <td>-</td>
 </tr>
 <tr>
   <td>.lispx</td>
   <td>Any of above</td>
   <td>Language should be defined in metadata,<br/>Common Lisp is the default</td>
 </tr>
 <tr>
   <td>.lispxz, .zip</td>
   <td>Any of above</td>
   <td>Packaged executable source distributions</td>
 </tr>
</table>


<h4>Table 3, Implementation Details</h4>


<table border="0" cellpadding="3" cellspacing="0" class="simple software" align="center">
 <tr>
   <th>Language</th>
   <th>Supported Implementations</th>
   <th>Name for the --i lispx Option</th>
   <th>Default Command</th>
   <th>Default Command Line Options</th>
 </tr>
 <tr>
   <td rowspan="5">Common Lisp</td>
   <td>Clozure CL</td>
   <td>ccl</td>
   <td>wx86cl<br/>(lx86cl on Linux)<br/>(dx86cl on MacOSX)</td>
   <td>&nbsp;</td>
 </tr>
 <tr>
   <td>SBCL</td>
   <td>sbcl</td>
   <td>sbcl</td>
   <td>--noinform</td>
 </tr>
 <tr>
   <td>CLISP</td>
   <td>clisp</td>
   <td>clisp</td>
   <td>--quiet&nbsp;--silent</td>
 </tr>
 <tr>
   <td>ABCL</td>
   <td>abcl</td>
   <td>java</td>
   <td>org.armedbear.lisp.Main&nbsp;--noinform</td>
 </tr>
 <tr>
   <td>ECL</td>
   <td>ecl</td>
   <td>ecl</td>
   <td>-q</td>
 </tr>
 <tr>
   <td>Clojure</td>
   <td>Clojure for JVM</td>
   <td>clojure</td>
   <td>java</td>
   <td>clojure.main</td>
 </tr>
 <tr>
   <td>Scheme</td>
   <td>Racket</td>
   <td>racket</td>
   <td>racket</td>
 </tr>
</table>

<h3>Configuration</h3>

<p><b>lispx-proxy</b> uses a file named `.lispxrc' found in the user's home directory as a configuration file (on Windows user's home directory may be defined with the `USERPROFILE' environment variable, if `HOME' env. variable is absent). There are two kind of options: per-language options and per-implementation options. For an instance see the example configuration file in the <b>lispx-proxy</b> installation directory.</p>

<h4>Per-language options</h4>

<p class="software"><span class="mono">default_implementation</span> - overrides the default language implementation (see <b>Table 3</b> for details).</p>

<h4>Per-implementation options</h4>

<p class="software"><span class="mono">command</span> - overrides the default implementation executable name (full path may be specified).</p>
<p class="software"><span class="mono">classpath</span> - sets the classpath of a JVM-based language implementation.</p>
<p class="software"><span class="mono">load</span> - sets the default initialization file path for a given implementation.</p>

<p>Configuration file options may be overriden by environment variables with the same name.</p>

<h3>Creating packaged distributions</h3>

<p>It's possible to create relatively complex Common Lisp, Clojure or Scheme source code distributions which could be executed with <b>lispx-proxy</b>. To make the launch process simple for a user, <b>lispx-proxy</b> relies on a metadata and predefined filesystem structure of a distribution.</p>

<h4>lispx-proxy Executable Source Distribution Filesystem Structure</h4>

<table border="0" cellpadding="3" cellspacing="0" class="simple software" >
  <tr>
    <th>All languages</th>
    <th>Clojure specific<sup>1</sup></th>
    <th>Description</th>
  <tr>
	<td class="mono" style="text-align: left;">shared/</td>
	<td class="mono" style="text-align: left;">lib/, lib/dev/, resources/</td>
	<td style="text-align: left;">[shared libraries, Java jar-packages<sup>2</sup> and native applications, optional]</td>
  </tr>
  <tr>
	<td class="mono" style="text-align: left;">source/</td>
	<td class="mono" style="text-align: left;">src/</td>
	<td style="text-align: left;">[application source, optional]</td>
  </tr>
  <tr>
	<td class="mono" style="text-align: left;">systems/</td>
	<td class="mono" style="text-align: left;">-</td>
	<td style="text-align: left;">[third-party ASDF systems, optional]</td>
  </tr>
  <tr>
	<td class="mono" style="text-align: left;">application.ico</td>
	<td class="mono" style="text-align: left;">application.ico</td>
	<td style="text-align: left;">[application tray icon, optional, Windows only]</td>
  </tr>
  <tr>
	<td class="mono" style="text-align: left;">application.lispx</td>
	<td class="mono" style="text-align: left;">application.lispx</td>
	<td style="text-align: left;">[application root file, mandatory]</td>
  </tr>
  <tr>
	<td class="mono" style="text-align: left;">application.meta</td>
	<td class="mono" style="text-align: left;">application.meta</td>
	<td style="text-align: left;">[application metadata, mandatory]</td>
  </tr>
</table>


<br/>
<div class="software"><span><sup>1</sup> Clojure-specific filesystem structure corresponds to the structure of a <a href="https://github.com/technomancy/leiningen">Leiningen</a> project. It's possible to launch a configured <b>Leiningen 1</b> project as-is just by adding application.lispx and application.meta files to the project folder. Because <b>Leiningen 2</b> loads dependencies directly from its Maven repository, it's necessary to add dependencies manually in this case.</span>
<br/><span><sup>2</sup> Will be automatically added to the classpath.</span>
</div>

<h4 class="software">Preconditions</h4>

<ul>
  <li>Entire directory subtree of the distribution `shared' folder will be added to the PATH environment variable of the launched Lisp process, so it's possible to launch applications and load shared libraries placed in these directories from the Lisp application. <b>lispx-proxy</b> will stop further directory scanning when it finds a file named `.noindex' contained in a directory, so it possible to exclude a directory subtree from being added to PATH, placing this file into the subtree root.</li>
  <li>Paths of all subdirectories of the `source' and `systems' folders will be added to the Lisp asdf:*central-repository* variable (in the case of a Common Lisp application), therefore all ASDF systems placed there will be accessible by the application.</li>
  <li>File `application.lispx' will be loaded before the application entry point invocation (see section on metadata).</li>
</ul>

<h4>lispx-proxy Metadata</h4>

<p>Informally, <b>lispx-proxy</b> metadata is a s-expression with the following structure (all parts except the application name and version are optional):</p>

<pre class="software">
(lispx-meta
  (application :name "The Application Name" :version "Version String"
               :author "Application Author" :subsystem gui|console
               :entry-point "entry-point-function" :url "entry-url")
  (language :name language-name :implementation implementation-name
            :command "path/to/an/interpreter" :classpath "jvm/classpath"
            :init "path/to/an/init/file" :args "override for the default cmd. line")
  (depends-on (systems :system-name-1 "system-name-2"))
  (actions ("Action 1" "http://localhost:8080/actions/act1")
           ("Action 2" "http://localhost:8080/actions/act2")
           "--"))
</pre>

<p>The `application' subexpression provides application versioning information and is used to generate <b>lispx-proxy</b> application cache hash values. The `subsystem' option has meaning only on Windows and `defines' the subsystem in which the application should run (the underlying Lisp process console window will not be shown if `gui' value is specified, which is the default). The `entry-point' option defines an application entry point function that will be invoked after the `application.lispx' file has been loaded. The application entry point should be a function with one <i><b>optional</b></i> argument, and it is mandatory only in the case of a fast loadable or executable application image creation. The `url' option may be used by external tools to get the entry URL of a web application.</p>

<p>The `language' subexpression options are correspond to the same parameterized <b>lispx-proxy</b> command-line options (the `name' option corresponds to the `language' command line option), except the `:args' option, which is used to override the default command line options, listed in <b>Table 3</b> (for details see the section below). Command line options have preference over the metadata. It's possible to use the `%app-root%' macro (expands to the actual application root directory path) in the options which require path specification.</p>

<p>The `depends-on' subexpression may contain names of ASDF dependencies used by the Common Lisp application, which will have been preloaded before the load of the `application.lispx' file.</p>

<p>The `actions' subexpression allows to add action items to the application system tray context menu (Windows only), the URL specified in an action definition will be retreived by <b>lispx-proxy</b> using a HTTP GET request. The double dash (--) inserts a menu separator.</p>

<h4>Overriding the Default Command Line Options</h4>

<p>It's possible to override the default command line options (see <b>Table 3</b>) with the `:args' metadata key or the `lispx.&lt;impl. name&gt;.args' environment variable, where &lt;impl. name&gt; is the corresponding short implementation name from the <b>Table 3</b>.</p>

<p>The %app-root% macro could be used in the override; options with spaces should be placed inside the double quotes (escaped with backslashes in the case of metadata), for example: </p>

<pre class="software">
(lispx-meta
  (application :name "Sample Clojure Server" :version "v0.1")
  (language :name clojure :classpath "%app-root%/source"
            :args "-server \"-Duser.home=%app-root%\" clojure.main"))
</pre>

<h4>Packaging</h4>

<p>An executable source distribution could be packaged by executing the `lispx' command inside the distribution directory with the `--package' option which accepts destination package file name as an argument. It's also possible to create packages by using any archiving tool which is able to produce files in zip/deflate format.</p>

<h3>Credits</h3>

<p>This work uses parts of Conrad Barski's <a href="http://www.lisperati.com/logo.html">Lisp Logo</a>.</p>

<script language="javascript">
<!--
  function mailMe()
  {
    window.location = 'mailto:gchristnsn' + '%40' + 'gmail.com';
  }
-->
</script>

<div><p style="text-indent: 0px;">© 2010-2012 g/christensen (<a href="javascript:mailMe()">gchristnsn<img src="images/at.png" style="position: relative; top: 4px;" alt=".at." border="0">gmail.com</a>)</p></div>
</div>
</body>
</html>
